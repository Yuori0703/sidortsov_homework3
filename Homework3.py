# Yuori Sidortsou
# Date: 04/03/2024
# Description: Homework3
# Gomel IT Academy Python 3.11.5

# Задача 1

# Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу.
# Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
# Входные данные - строка из чисел, разделенная пробелами.
# Выходные данные - количество пар.
# Важно: `1 1 1` - это 3 пары, `1 1 1 1` - это 6 пар.

import re
def pairs(numbers_string):
    pairs = 0
    numbers_string = (numbers_string.split()) # преообрзуем строку в список
    numbers_string.sort() # сортируем список
    for i in range(len(numbers_string)): # запускаем вложенный цикл для поиска одинаковых элементов
        for j in range(i + 1, len(numbers_string)):
            if numbers_string[i] == numbers_string[j]: # проверяем, что элементы равны
                pairs += 1 # если равны прибавляем к pairs 1
    return pairs

# Задача 2

#Дан список. Выведите те его элементы, которые встречаются в списке только один раз.
#Элементы нужно выводить в том порядке, в котором они встречаются в списке.

def uniques(array):
    el_count = {} # создаем пустой словарь для хранения элементов
    for el in array:
        el_count[el] = el_count.get(el, 0) + 1 # заполняем словарь
        array = [key for key, value in el_count.items() if value == 1] # выводим элементы которые встречаются только 1 раз
    return array

# Задача 3

# Дан список целых чисел. Требуется переместить все ненулевые элементы в левую часть списка,
# не меняя их порядок, а все нули - в правую часть. Порядок ненулевых элементов изменять нельзя,
# дополнительный список использовать нельзя, задачу нужно выполнить за один проход по списку.
# Верните полученный список.
# Задача не проходит тест. Такой вариант решения мог бы быть, но всего с одним исправлением - item == 0 (см ответы)

def ordered_list(array):
    for i in range(len(array)): # перебираем список по длине
        if array[i] == 0: # проверяем на 0 элемент списка
            array.append(array[i]) # если он равен нулю, добавляем в конец списка
            array.pop(i) # удаляем елемент равный нулю
    return array

# Задача 4

#Возмите кортеж `('a', 'b', 'c')`, И сделайте из него список.

def tuple_to_list(in_tuple):
    lst = [] # создаем пустой список
    lst = list(in_tuple) # преобразуем список в кортеж
    return lst

# Задача 5

#Даны два натуральных числа. Вычислите их наибольший общий делитель при помощи алгоритма Евклида (мы не знаем функции и рекурсию). can't call itself

def euclid(a,b):
    if a == 0 and b != 0: # проверяем условие a == 0 and b != 0
        del_gen = b # в таком случае b наибольший общий делитель
    elif a != 0 and b == 0:  # проверяем условие a == 0 and b != 0
        del_gen = a # в таком случае b наибольший общий делитель
    if a > b: # проверяем условие a > b
        del_sm= b # в таком случае b делитель
    elif b > a: # проверяем условие b > a
        del_sm= a # в таком случае а делитель
    for i in range(1, del_sm + 1):
        if (a % i == 0) and (b % i == 0): # проверяем условие, когда целочисленный остаток от деления 2 целых чисел а и b станет 0 
            del_gen = i # вычисляем наибольший общий делитель
    return del_gen

# Задача 6

#Dictionaries
 #Дан список стран и городов каждой страны. Затем даны названия городов. Для каждого города укажите, в какой стране он находится.
    #Учтите, что бывают ситуации когда город с таким называнием бывает в разных странах (Брест есть в Беларуси и Франции).
    #Входные данные
    #Программа получает на вход количество стран N. Далее идет N строк, каждая строка начинается с названия страны, затем идут названия городов этой страны.
    #В следующей строке записано число M, далее идут M запросов — названия каких-то M городов, перечисленных выше.
    #Выходные данные
    #Для каждого из запроса выведите название страны, в котором находится данный город.
    #Пример данных:
    #Входные данные
    #2
    #Russia Moscow Petersburg Novgorod Kaluga
    #Ukraine Kiev Donetsk Odessa
    #3
    #Odessa
    #Moscow
    #Novgorod
    #Выходные данные
    #Ukraine
    #Russia
    #Russia
    #input_string = "2\nRussia Moscow Petersburg Novgorod Kaluga\nUkraine Kiev Donetsk Odessa\n3\nOdessa\nMoscow\nNovgorod"
    #output_string = 'Ukraine\nRussia\nRussia'
    #country_map={}

def cities(input_string):
    lst = input_string.split("\n")
    output_string = ""
    country_city = [] # создаем пустой список стран и городов
    city_list = [] # создаем пустой список для городов
    country_map = {} # создаем пустой словарь городов и стран
    N = int(lst[0]) # получаем количество стран из строки
    for i in range(1, N + 1): # получаем список стран и городов из строки
        country_city.append(lst[i])
    for i in country_city: # запускаем цикл для итерации по списку стран и городов
        str_ = i.split() 
        country_map[str_[0]] = str_[1:]  # присваиваем стране- ключу значения городов
        M = int(lst[N+1]) # получаем количество запрошенных городов из строки
    for i in range(N+2, len(lst)): # получаем города из строки
        city_list.append(lst[i])
    count_end = 0 # создаем переменную для подсчета последнего города
    for city in city_list: # проходим циклом по списку городов
        count = 0 # создаем переменную для подсчета городов в нескольких странах
        count_end += 1 # прибавляем 1 для 1 города
        count_map = 0 # создаем переменную для подсчета последнего города
        for key in country_map: # запускаем цикл для поиска города в стране
            count_map += 1 # прибавляем 1 для 1 страны
            if city in country_map[key] and count == 0 and len(city_list) != count_end:
                output_string = output_string + key # прооверяем условие находится ли город в словаре страны
                count+=1 #прибавляем 1 для подсчета городов в нескольких странах
            elif city in country_map[key] and count > 0 : 
                output_string = output_string + " " + key #проверяем условие что город находится в стране и count>0
            elif city in country_map[key] and  len(city_list) == count_end: 
                output_string = output_string + key  #проверяем условие что город находится в списке стран, длина списка городов = последнему городу в списке
            if count_map == len(country_map) and len(city_list) != count_end:
                output_string = output_string + "\n" #проверяем условие длина словаря стран- городов = count_map а длина списка городов != последнему городу в списке
    return output_string 

# Задача 7
 
#Sets
    #Языки
    #Каждый из N школьников некоторой школы знает Mi языков. Определите, какие языки знают все школьники и языки, которые знает хотя бы один из школьников.
    #Входные данные
    #Первая строка входных данных содержит количество школьников N. Далее идет N чисел Mi, после каждого из чисел идет Mi строк, содержащих названия языков, которые знает i-й школьник.
    #Пример входных данных:
    #3 # N количество школьников
    #2 # M1 количество языков первого школьника
    #Russian # языки первого школьника
    #English
    #3 # M2 количество языков второго школьника
    #Russian
    #Belarusian
    #English
    #3
    #Russian
    #Italian
    #French
    #Выходные данные
    #В первой строке выведите количество языков, которые знают все школьники. Начиная со второй строки - список таких языков.
    #Затем - количество языков, которые знает хотя бы один школьник, на следующих строках - список таких языков.
    #input_string = "3\n2\nRussian\nEnglish\n3\nRussian\nBelarusian\nEnglish\n3\nRussian\nItalian\nFrench"
    #output_string = '1\nRussian\n5\nRussian\nFrench\nItalian\nEnglish\nBelarusian'




def languages(input_string):
    list_word = re.findall(r'[a-zA-Z]+', input_string) #используем регулярные выражения для извлечения симаолов из входных данных
    list_nums = re.findall(r'\d+', input_string) #используем регулярные выражения для извлечения числовых значений из входных данных
    list_nums = [int(i) for i in list_nums] #приводим с помощью генератора списков числовые значения к типу int
    N = int(list_nums[0]) # получаем количество школьников из входной строки
    lst_set = [] # создаем пустой список для хранения множеств
    count = 0 # создаем переменную со значением 0, для хранения количества языков из входных данных
    list_nums.pop(0)# удаляем 1 элемент списка list_nums, присвоенный количеству школьников
    for i in range(0, N):# проходим циклом по количеству школьников
        lang_set = set() #создаем пустое множество для хранения языков N-го школьника
        Mi = list_nums[i] # Mi присваиваем значение количества языков N-го школьника
        for j in range(Mi): # проходим циклом по количеству языков каждого школьника
            lang_set.add(list_word[count]) # добавляем каждый язык из списка list_word во множество
            count+=1 # прибавляем к count 1, для итерирования по списку list_word
        lst_set.append(lang_set)# добавляем множество lang_set в список lst_set
    all_stud = set.intersection(*lst_set) #языки которые знают все ученики, находим с помощью пересечения множеств
    num_all_stud = len(all_stud) #Количество языков, которые знают все школьники, находим длину
    one_stud = set.union(*lst_set) # языки которые знает хотя бы один ученик, находим с помощью объединения множеств
    num_one_stud = len(one_stud) # Количество языков, которые знает хотя бы один школьник, находим длину
    all_stud = "\n".join(all_stud) # используем join для преобразования в строку all_stud
    one_stud = "\n".join(one_stud) # используем join для преобразования в строку one_stud
    # суммируем выходные данные в строку output_string
    output_string = str(num_all_stud) + "\n" + all_stud + "\n" + str(num_one_stud) + "\n" + one_stud
    return output_string

# Задача 8

#Generators
    #Генераторы списков
    #Используйте генератор списков чтобы получить следующий: ['xy', 'xz', 'xv', 'yy', 'yz', 'yv']. из ['x','y'] & ['y','z','v']

def list_gen(arr1, arr2):
    result = [(i+j) for i in arr1 for j in arr2] # создаем переменную result в которую вносим рузультат выполнения генератора
    return result

# Задача 9

# Генераторы словарей
# Создайте словарь с помощью генератора словарей, так чтобы его ключами были числа от 1 до N, а значениями кубы этих чисел.

def dict_gen(N):
    result = {int(el): el**3 for el in range(1, N + 1)} # создаем генератор словарей, с возведением N в куб
    return result

# Задача 10

#Кортежи
#Создайте генератор, который возвращает строки таблицы умножения от 0 до заданного числа.

def multiplication_table(N):
    if N == 0: # условия для вывода 1 элемента 
        table = 0
    else:
        table = ''.join([''.join([f'{x*y}' for x in range(N + 1)])+'\n' for y in range(N + 1)]) 
    return table

    

